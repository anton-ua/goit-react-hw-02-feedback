{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/App/App.js","index.js","components/App/App.module.css"],"names":["FeedbackOptions","options","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","onLeaveFeedback","Counter","state","hadleIncrement","e","currentFeedback","currentTarget","textContent","toLowerCase","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","className","styles","container","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"2NAsBeA,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACtB,oCACE,qDACA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,QAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,WAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,SCsBWG,EA/BI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,mBALiB,SAMjBC,gBAGE,oCACE,0CAEA,oCAAUL,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,MAGF,iD,gBCjBiBE,E,4MACnBC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,EACpBC,iBAAiB,G,EAGnBG,eAAiB,SAACC,GAChB,IAAMC,EAAkBD,EAAEE,cAAcC,YAAYC,cAE/C,EAAKR,iBACR,EAAKS,SAAS,CAAET,iBAAiB,IAGnC,EAAKS,UAAS,SAACP,GAAD,sBACXG,EAAkBH,EAAMG,GAAmB,MAG9C,EAAKK,qBACL,EAAKC,mC,EAGPD,mBAAqB,WACnB,EAAKD,UAAS,kBAA6B,CACzCX,MADY,EAAGH,KAAH,EAASC,QAAT,EAAkBC,S,EAKlCc,gCAAkC,WAChC,EAAKF,UAAS,gBAAGd,EAAH,EAAGA,KAAMG,EAAT,EAASA,MAAT,MAAsB,CAClCC,mBAAoBa,KAAKC,MAAc,IAAPlB,EAAcG,Q,uDAIxC,IAAD,EAQHgB,KAAKZ,MANPP,EAFK,EAELA,KACAC,EAHK,EAGLA,QACAC,EAJK,EAILA,IACAC,EALK,EAKLA,MACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,gBAGF,OACE,yBAAKe,UAAWC,IAAOC,WACrB,kBAAC,EAAD,CACE1B,QAASuB,KAAKX,eACdH,gBAAiBA,IAEnB,kBAAC,EAAD,CACEL,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,EACpBC,gBAAiBA,S,GA3DUkB,aCDrCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCHjDC,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.fc80943f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options }) => (\n  <>\n    <h2>Please leave feedback</h2>\n    <button type=\"button\" onClick={options}>\n      Good\n    </button>\n    <button type=\"button\" onClick={options}>\n      Neutral\n    </button>\n    <button type=\"button\" onClick={options}>\n      Bad\n    </button>\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n  onLeaveFeedback,\n}) =>\n  onLeaveFeedback ? (\n    <>\n      <h2>Statistics</h2>\n\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </>\n  ) : (\n    <p>No feedback given</p>\n  );\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n  onLeaveFeedback: PropTypes.bool.isRequired,\n};\n\nexport default Statistics;\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"../Statistics/Statistics\";\nimport styles from \"./App.module.css\";\n\nexport default class Counter extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positivePercentage: 0,\n    onLeaveFeedback: false,\n  };\n\n  hadleIncrement = (e) => {\n    const currentFeedback = e.currentTarget.textContent.toLowerCase();\n\n    if (!this.onLeaveFeedback) {\n      this.setState({ onLeaveFeedback: true });\n    }\n\n    this.setState((state) => ({\n      [currentFeedback]: state[currentFeedback] + 1,\n    }));\n\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = () => {\n    this.setState(({ good, neutral, bad }) => ({\n      total: good + neutral + bad,\n    }));\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState(({ good, total }) => ({\n      positivePercentage: Math.round((good * 100) / total),\n    }));\n  };\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad,\n      total,\n      positivePercentage,\n      onLeaveFeedback,\n    } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <FeedbackOptions\n          options={this.hadleIncrement}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivePercentage}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\"};"],"sourceRoot":""}